# -*- coding: utf-8 -*-
"""dlong.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ZNGUaDTWzOAeLmdfkyIsqfIb2fw_tLa
"""

#import libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
# Đọc dữ liệu
data = pd.read_csv("asm2_data.csv")
print(type(data)) #DataFrame
data
df = pd.DataFrame(data) #tạo DataFrame
df

df = df.dropna(subset=['ProductID']) # xoá dữ liệu trống

df = df.drop_duplicates(subset=['ResultID'])
#vì id là duy nhất nên cần xóa trùng lặp

df['ProductID'] = df['ProductID'].astype(int).astype(str)
df['StoreID'] = df['StoreID'].astype(str)
print(df)

# B2 : Làm sạch dữ liệu
data.dropna(inplace=True)
data.drop_duplicates(inplace=True)
data.isnull().sum()

# Bước 3 : Phân tích dữ liệu
data["Sales"] = data["Quantity Ordered"] * data["Price Each"]
# data
# Thống kê mô tả
# prices = data["Price Each"]
# prices.sum()
# prices.mean()
# prices.median()
# prices.max()
# prices.min()
# print(prices.median())
# prices
data[["Quantity Ordered","Price Each","Sales"]].describe()

#Doanh số bán hàng từng tháng trong năm
#Những tháng nào trong năm có doanh số cao nhất
#Doanh số theo thành phố
#Thành phố nào có doanh thu cao nhất - thuộc vùng,miền nào

df["Month"] = df["Date"].str[:2]
df["Sales"] = df["Quantity Ordered"] * df["Price Each"] # Tính tổng doanh thu

sales_by_month = df.groupby("Month")["Sales"].sum() #Tính tổng doanh thu theo tháng

#Vẽ chart
months = sales_by_month.index
sales = sales_by_month.values

plt.plot(months, sales, marker='o', linestyle='-', color='b')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.title('Calculating Total Sales by Month')
plt.grid(True)
plt.show()

store_sales = data.groupby('StoreID')['Price Each'].sum() # Tính tổng doanh thu theo store

plt.bar(store_sales.index, store_sales.values)
plt.xlabel('Store ID')
plt.ylabel('Total Price')
plt.title('Total Price by Store')
plt.show()

data["Month"] = data["Date"].str[:2]
saleByMonth = data.groupby('Month')['Sales'].sum()

months = saleByMonth.index

plt.plot(months, saleByMonth)
plt.show()

product_sales = df.groupby('ProductID')['Quantity Ordered'].sum().reset_index()

top_products = product_sales.nlargest(10, 'Quantity Ordered') # tìm 10 sp bán chạy nhất
# Draw bar chart
plt.figure(figsize=(10, 6))
plt.bar(top_products['ProductID'].astype(str), top_products['Quantity Ordered'], color='#756bb1')
plt.xlabel('Product ID')
plt.ylabel('Quantity Ordered')
plt.title('Top 10 Products Sold')
plt.xticks(rotation=0)
plt.show()

df["Sales"] = df["Quantity Ordered"] * df["Price Each"] # Tính tổng doanh thu

sales_by_city = df.groupby("City")["Sales"].sum().reset_index() # Tính tổng doanh thu theo thành phố


top_cities = sales_by_city.nlargest(5, 'Sales') # tìm  5  city  bán chạy nhất

plt.figure(figsize=(10, 6))
plt.bar(top_cities['City'], top_cities['Sales'], color='#756bb1')
plt.xlabel('City')
plt.ylabel('Total Sales')
plt.title('Top 5 Cities by Total Sales')
plt.xticks(rotation=0)
plt.show()

df["Month"] = df["Date"].str[:2]
monthly_sales = df.groupby(['Month', 'ProductID'])['Quantity Ordered'].sum().reset_index() # Tính tổng doanh thu theo tháng
top_products_per_month = monthly_sales.loc[monthly_sales.groupby('Month')['Quantity Ordered'].idxmax()] #tìm sp bán chạy nhất theo tháng

print(top_products_per_month)

quantity_per_store = df.groupby('StoreID')['Quantity Ordered'].sum() # Tính tổng số lượng sản phẩm bán ra theo cửa hàng

plt.figure(figsize=(12, 6))
quantity_per_store.plot(kind='bar', color='#756bb1')
plt.title('Total Quantity Ordered Per Store')
plt.xlabel('StoreID')
plt.ylabel('Total Quantity Ordered')
plt.xticks(rotation=0)
plt.show()

sales_per_city = df.groupby('City')['Sales'].sum()

# sales_per_city = sales_per_city[sales_per_city > 0]

plt.figure(figsize=(10, 10))
sales_per_city.plot(kind='pie', autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired(range(len(sales_per_city))))
plt.title('Revenue Share by City')
plt.ylabel('')
plt.show()

from sklearn.model_selection import train_test_split

x = df[['ProductID', 'Quantity Ordered']]
y = df['Sales']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

#kiểm tra độ dài của X_train
len(x_train)
x_train

from sklearn.linear_model import LinearRegression #hồi quy tuyến tính
clf = LinearRegression()

x_train.dropna(inplace=True)
y_train = y_train[x_train.index] #đoạn này xóa các giá trị bị thiếu vì sklearn ko đọc đc NaN values

clf.fit(x_train, y_train)

x_test.dropna(inplace=True) #xóa các NaN values từ test set
clf.predict(x_test)

y_test

y_test.dropna(inplace=True)
clf.score(x_test, y_test)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, classification_report

print("Accuracy {} %".format(100 * accuracy_score(y_pred_class, y_test_class)))

#đoạn này xóa các NaN values của y_pred và y_test
mask = ~np.isnan(y_test) & ~np.isnan(y_pred)

y_test_filtered = y_test[mask]
y_pred_filtered = y_pred[mask]

y_pred_class = [1 if y >= 0.5 else 0 for y in y_pred]
y_test_class = [1 if y >= 0.5 else 0 for y in y_test]

import seaborn as sns

cm = confusion_matrix(y_test_class, y_pred_class)
sns.heatmap(cm, annot=True)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

from sklearn.metrics import classification_report

print(classification_report(y_test_class, y_pred_class))

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(x_train, y_train_class)

y_pred = model.predict(x_test)
y_pred